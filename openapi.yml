openapi: 3.0.3
info:
  title: Task Management System
  description: A simple API to manage tasks with JWT-based authentication and task categories.
  version: 1.0.0
servers:
  - url: https://localhost:8080

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRole:
      type: string
      enum: [user, admin]
      example: "user"

    TaskStatus:
      type: string
      enum: [pending, in_progress, completed, expired]
      example: "pending"

    TaskPriority:
      type: string
      enum: [low, normal, urgent]
      example: "normal"

    TaskCommonFields:
      type: object
      properties:
        title:
          type: string
          example: "Implement user authentication"
        description:
          type: string
          example: "Develop and test JWT-based authentication"
        category:
          type: string
          default: "new"
          example: "work"
        deadline:
          type: string
          format: date-time
          example: "2024-09-30T23:59:59"

    TaskBase:
      allOf:
        - $ref: '#/components/schemas/TaskCommonFields'
        - type: object
          properties:
            priority:
              $ref: '#/components/schemas/TaskPriority'
            status:
              $ref: '#/components/schemas/TaskStatus'

    Task:
      allOf:
        - $ref: '#/components/schemas/TaskBase'
        - type: object
          properties:
            task_id:
              type: integer
              example: 101
            created_at:
              type: string
              format: date-time
              example: "2024-09-25T12:00:00"
            updated_at:
              type: string
              format: date-time
              example: "2024-09-26T10:00:00"

    TaskCreate:
      allOf:
        - $ref: '#/components/schemas/TaskBase'
      required:
        - title
        - priority
        - status

    TaskUpdate:
      allOf:
        - $ref: '#/components/schemas/TaskBase'

    UserCommon:
      type: object
      properties:
        name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        login:
          type: string
          example: "john_doe"
        role:
          $ref: '#/components/schemas/UserRole'

    UserBase:
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            password:
              type: string
              example: "abrew1"

    UserNoPassword:
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            user_id:
              type: integer
              example: 1
            created_at:
              type: string
              format: date-time
              example: "2024-09-25T12:00:00"
            updated_at:
              type: string
              format: date-time
              example: "2024-09-26T10:00:00"

    User:
      allOf:
        - $ref: '#/components/schemas/UserNoPassword'
        - type: object
          properties:
            password:
              type: string
              example: "abrew1"

    UserCreate:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-09-25T12:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-09-26T10:00:00"

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

    BadInputError:
      description: Invalid input or missing required fields

    TaskNotFoundError:
      description: Task not found

    UserNotFoundError:
      description: User not found

    ForbiddenAccessError:
      description: Not enough permissions

    InternalServerError:
      description: Internal server error

security:
  - BearerAuth: []

tags:
  - name: Admin
  - name: User

paths:

  /v1/auth/login:
    post:
      summary: User login
      tags:
        - User
      description: Logs in a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  format: password
                  example: "strong_password"
      responses:
        200:
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt_token_string"
        401:
          description: Invalid credentials

  /v1/tasks:
    get:
      summary: Get a list of tasks
      tags:
        - User
      description: Retrieve all tasks, optionally filtering by status, priority, category, or deadline.
      parameters:
        - name: status
          in: query
          description: Filter tasks by status
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          description: Filter tasks by priority
          required: false
          schema:
            $ref: '#/components/schemas/TaskPriority'
        - name: category
          in: query
          description: Filter tasks by category (e.g., "work", "personal")
          required: false
          schema:
            type: string
        - name: deadline
          in: query
          description: Filter tasks by deadline (YYYY-MM-DD format)
          required: false
          schema:
            type: string
            format: date
      security:
        - BearerAuth: []
      responses:
        200:
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new task
      tags:
        - User
      description: Add a new task to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      security:
        - BearerAuth: []
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/BadInputError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/tasks/{userId}:
    get:
      summary: Get all tasks for a specific user
      tags:
        - Admin
      description: Retrieve all tasks associated with a specific user by user ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user whose tasks are to be retrieved
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        200:
          description: A list of tasks for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/UserNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/tasks/{task_id}:
    get:
      summary: Get task by ID
      tags:
        - User
      description: Retrieve a specific task by its ID.
      parameters:
        - name: task_id
          in: path
          required: true
          description: ID of the task to retrieve
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        200:
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/TaskNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update task by ID
      tags:
        - User
      description: Update the details of a specific task.
      parameters:
        - name: task_id
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      security:
        - BearerAuth: []
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/BadInputError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/TaskNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete task by ID
      tags:
        - User
      description: Remove a specific task from the system.
      parameters:
        - name: task_id
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        204:
          description: Task deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/TaskNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/users:
    post:
      summary: Create a new user
      tags:
        - Admin
      description: Admin-only. Create a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
      security:
        - BearerAuth: []
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
        400:
          $ref: '#/components/responses/BadInputError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenAccessError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/users/{userId}:
    put:
      summary: Update user data by ID
      tags:
        - Admin
      description: Allows an admin to update a specific user's information.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - BearerAuth: []
      responses:
        200:
          description: User updated successfully
        400:
          description: Invalid input or missing required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
        500:
          description: Internal server error

    delete:
      summary: Delete a user
      tags:
        - Admin
      description: Admin-only. Deletes a user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "123"
          description: The ID of the user to delete
      security:
        - BearerAuth: []
      responses:
        204:
          description: User deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenAccessError'
        404:
          $ref: '#/components/responses/UserNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/admin/tasks:
    get:
      summary: Get all tasks in the system
      tags:
        - Admin
      description: Admin-only. Retrieves all tasks regardless of the owner.
      security:
        - BearerAuth: []
      responses:
        200:
          description: A list of all tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenAccessError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/tasks/{taskId}:
    put:
      summary: Update a task
      tags:
        - Admin
      description: Admin-only. Update any task by its ID.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            example: "101"
          description: The ID of the task to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      security:
        - BearerAuth: []
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/BadInputError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenAccessError'
        404:
          $ref: '#/components/responses/TaskNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a task
      tags:
        - Admin
      description: Admin-only. Deletes any task by its ID.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            example: "101"
          description: The ID of the task to delete
      security:
        - BearerAuth: []
      responses:
        204:
          description: Task deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenAccessError'
        404:
          $ref: '#/components/responses/TaskNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
